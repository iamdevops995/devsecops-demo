name: devsecopcicd

on:
    push:
        branches: [ release ]
        paths-ignore:
            - 'kubernetes/deployment.yaml'
    pull_request:
        branches: [ release ]
jobs:
    test:
        name: unit testing
        runs-on: ubuntu-latest
        steps:
          - name: checkout
            uses: actions/checkout@v4
          - name: Setup nodejs
            uses: actions/setup-node@v4
            with:
                node-version: '20'
                cache: 'npm'
          - name: Install dependencies
            run: npm ci
          - name: Run Test
            run: npm test || echo "No dependencies found"
    lint:
        name: Static Code Analysis
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v4
                  
          - name: Setup Node.js
            uses: actions/setup-node@v4
            with:
                node-version: '20'
                cache: 'npm'
          - name: Install dependencies
            run: npm ci
          - name: Run ESLint
            run: npm run lint ||  echo "Static code analysis has been successfully completed"
    build:
        name: build
        runs-on: ubuntu-latest
        needs: [ test, lint]
        steps:
          - name: checkout code
            uses: actions/checkout@v4
          - name: setup node
            uses: actions/setup-node@v4
            with:
              node-version: '20'
              cache: npm
          - name: Install dependencies
            run: npm ci
          - name: Build project
            run: npm run build
          - name: upload build artifacts
            uses: actions/upload-artifact@v4
            with:
              name: build-artifacts
              path: dist/
    docker:
        name: Docker build and push
        runs-on: ubuntu-latest
        needs: [ build ]
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
        outputs:
          image_tag: ${{ steps.set_output.outputs.image_tag }}
        steps:
          - name: checkout code
            uses: actions/checkout@v4
          - name: Download build artifacts
            uses: actions/download-artifact@v4
            with:
              name: build-artifacts
              path: dist/
          - name: Set up docker buildx
            uses: docker/setup-buildx-action@v3

          - name: Log in to the Container registry
            uses: docker/login-action@v3
            with:
              registry: ${{ env.REGISTRY }}
              username: ${{ github.actor }}
              password: ${{ secrets.logesh }}
          - name: Extract metadata for docker
            id : meta
            uses: docker/metadata-action@v5
            with:
              images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
              tags: |
                type=sha,format=long
                type=ref,event=branch
                latest
          - name: Build Docker image
            uses: docker/build-push-action@v5
            with:
              context: .
              push: true
              tags: ${{ steps.meta.outputs.tags }}
              labels: ${{ steps.meta.outputs.labels }}
              load: true
          - name: Run trivy vulnerbility scan
            uses: aquasecurity/trivy-action@master
            with:
              image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
              format: 'table'
              exit-code: '1'
              ignore-unfixed: true
              vuln-type: 'os,library'
              severity: 'CRITICAL,HIGH'
          - name: Docker push image
            uses: docker/build-push-action@v5
            with:
              context: .
              push: true
              tags: ${{ steps.meta.outputs.tags }}
              labels: ${{ steps.meta.outputs.labels }}
          - name: set image tag output
            id: set_output
            run: echo "image_tag=$(echo ${{ github.sha}} | cut -c1 7)" >> $GITHUB_OUTPUT
    update-k8s:
        name: update kubernetes deployment
        runs-on: ubuntu-latest
        needs: [ docker ]
        if: github.ref == 'refs/heads/release' && github.event_name == 'push'
        steps:
          - name: checkout code
            uses: actions/checkout@v4
            with:
              token: ${{ secrets.logesh }}
          - name: Setup git config
            run: |
              git config user.name "Github Actions"
              git config user.email "actions@github.com"
          - name: Update kubernetes deployment file
            env:
              IMAGE_TAG: sha-${{ github.sha }}
              GITHUB_REPOSITORY: ${{ github.repository }}
              REGISTRY: ghcr.io
            run: | 
              NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"
              sed -i "s|image: ${REGISTRY}/.*|image:${NEW_IMAGE}|g" kubernetes/deployment.yaml
              echo "Updated deployment to use image ${NEW_IMAGE}"
              grep -A 1 "image:" kubernetes/deployment.yaml
          - name: Commit and push changes
            run: |
              git add kubernetes/deployment.yaml
              git commit -m "Update Kubernetes deployment with new image tag: ${{ needs.docker.outputs.image_tag }} [skip ci]" || echo "No changes to commit"
              git push


            